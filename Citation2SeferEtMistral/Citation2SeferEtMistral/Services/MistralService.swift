import Foundation

@MainActor
class MistralService: ObservableObject {
    @Published var generatedQuote: String = ""
    @Published var isLoading: Bool = false
    @Published var hasError: Bool = false
    
    func generateQuote(theme: String) async {
        isLoading = true
        hasError = false
        generatedQuote = ""
        
        print("ü§ñ G√©n√©ration citation pour th√®me: \(theme)")
        
        do {
            let prompt = createPrompt(theme: theme)
            print("ü§ñ Prompt cr√©√©: \(prompt.prefix(200))...")
            let quote = try await callMistralAPI(prompt: prompt)
            print("ü§ñ Citation re√ßue: \(quote)")
            generatedQuote = quote
        } catch {
            print("‚ùå Erreur lors de la g√©n√©ration: \(error)")
            hasError = true
            // Citation de fallback en cas d'erreur
            let fallback = generateFallbackQuote(theme: theme)
            print("üîÑ Utilisation fallback: \(fallback)")
            generatedQuote = fallback
        }
        
        isLoading = false
    }
    
    private func createPrompt(theme: String) -> String {
        let contextualPrompt = analyzeThemeContext(theme: theme)
        
        return """
        Cr√©er une citation inspirante et motivante sur le th√®me : "\(theme)".
        maximum 2 lignes, en fran√ßais,
        adapte toi au th√®me "\(theme)". pour √™tre comme dans l'univers de ce th√®me
        R√©ponds uniquement avec la citation, sans guillemets ni introduction.
        """
    }
    
    private func analyzeThemeContext(theme: String) -> String {
        let lowerTheme = theme.lowercased()
        
        // Jeux vid√©o populaires
        if lowerTheme.contains("rocket league") {
            return "Jeu de football avec voitures - √©voque l'a√©rodynamisme, les saves impossibles, le travail d'√©quipe, la pr√©cision et les goals spectaculaires"
        } else if lowerTheme.contains("spider") && lowerTheme.contains("man") {
            return "Super-h√©ros araign√©e - √©voque les responsabilit√©s, les pouvoirs d'araign√©e, sauver la ville, l'√©quilibre vie/h√©ros, la toile et l'agilit√©"
        } else if lowerTheme.contains("fifa") || lowerTheme.contains("football") {
            return "Football - √©voque la technique, les passes, les buts, l'esprit d'√©quipe, la tactique et la passion du ballon"
        } else if lowerTheme.contains("fortnite") {
            return "Battle royale - √©voque la construction, la survie, la strat√©gie, l'adaptation et la victoire royale"
        } else if lowerTheme.contains("minecraft") {
            return "Monde de blocs - √©voque la cr√©ativit√©, la construction, l'exploration, les ressources et l'imagination"
        } else if lowerTheme.contains("batman") {
            return "Chevalier noir - √©voque la justice, Gotham, les gadgets, la d√©termination et la protection des innocents"
        } else if lowerTheme.contains("basketball") || lowerTheme.contains("basket") {
            return "Basketball - √©voque les shoots, les dunks, l'adresse, l'√©quipe et la performance athl√©tique"
        } else if lowerTheme.contains("tennis") {
            return "Tennis - √©voque la pr√©cision, les √©changes, la concentration, l'endurance et la technique"
        } else if lowerTheme.contains("programming") || lowerTheme.contains("code") {
            return "Programmation - √©voque les algorithmes, le debug, l'innovation, la logique et la cr√©ation num√©rique"
        } else if lowerTheme.contains("music") || lowerTheme.contains("musique") {
            return "Musique - √©voque l'harmonie, le rythme, l'√©motion, la cr√©ativit√© et l'expression artistique"
        } else {
            return "Th√®me g√©n√©ral - adapte avec des m√©taphores concr√®tes et des r√©f√©rences sp√©cifiques au domaine mentionn√©"
        }
    }
    
    private func callMistralAPI(prompt: String) async throws -> String {
        print("üîë V√©rification configuration API...")
        // V√©rifier si l'API est configur√©e
        guard MistralConfig.isConfigured else {
            print("‚ùå API non configur√©e")
            throw MistralError.apiKeyNotConfigured
        }
        
        print("‚úÖ API configur√©e, URL: \(MistralConfig.baseURL)")
        guard let url = URL(string: MistralConfig.baseURL) else {
            print("‚ùå URL invalide")
            throw MistralError.invalidURL
        }
        
        let requestBody: [String: Any] = [
            "model": MistralConfig.model,
            "messages": [
                [
                    "role": "user",
                    "content": prompt
                ]
            ],
            "max_tokens": MistralConfig.maxTokens,
            "temperature": MistralConfig.temperature
        ]
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(MistralConfig.apiKey)", forHTTPHeaderField: "Authorization")
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            throw MistralError.encodingError
        }
        
        print("üåê Envoi requ√™te API...")
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            print("‚ùå R√©ponse HTTP invalide")
            throw MistralError.serverError
        }
        
        print("üì° Code de r√©ponse: \(httpResponse.statusCode)")
        
        guard httpResponse.statusCode == 200 else {
            print("‚ùå Erreur serveur: \(httpResponse.statusCode)")
            if let errorData = String(data: data, encoding: .utf8) {
                print("üìÑ D√©tails erreur: \(errorData)")
            }
            
            // Gestion sp√©cifique de l'erreur 429 (quota d√©pass√©)
            if httpResponse.statusCode == 429 {
                throw MistralError.quotaExceeded
            } else {
                throw MistralError.serverError
            }
        }
        
        do {
            if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
               let choices = json["choices"] as? [[String: Any]],
               let firstChoice = choices.first,
               let message = firstChoice["message"] as? [String: Any],
               let content = message["content"] as? String {
                return content.trimmingCharacters(in: .whitespacesAndNewlines)
            } else {
                throw MistralError.parsingError
            }
        } catch {
            throw MistralError.parsingError
        }
    }
    
    func generateFallbackQuote(theme: String) -> String {
        let lowerTheme = theme.lowercased()
        
        // Citations sp√©cialis√©es selon le contexte d√©tect√©
        if lowerTheme.contains("rocket league") {
            let quotes = [
                "Sefer ma√Ætrise chaque save impossible, car il sait que dans Rocket League comme dans la vie, c'est la pers√©v√©rance qui m√®ne √† la victoire.",
                "Comme dans Rocket League, Sefer comprend que l'teamwork et la pr√©cision transforment chaque goal en chef-d'≈ìuvre.",
                "Sefer vole vers ses r√™ves avec l'agilit√© d'une voiture de Rocket League, sachant que chaque boost compte."
            ]
            return quotes.randomElement()!
        } else if lowerTheme.contains("spider") && lowerTheme.contains("man") {
            let quotes = [
                "Comme Spider-Man, Sefer sait que de grands pouvoirs impliquent de grandes responsabilit√©s, et que chaque d√©fi est une toile √† tisser.",
                "Sefer swingue √† travers les obstacles de la vie avec l'agilit√© de Spider-Man, sachant que chaque chute pr√©pare un nouveau saut.",
                "Tel Spider-Man prot√©geant New York, Sefer d√©fend ses r√™ves avec courage et d√©termination."
            ]
            return quotes.randomElement()!
        } else if lowerTheme.contains("pok√©mon") || lowerTheme.contains("pokemon") {
            let quotes = [
                "Sefer collectionne les victoires comme un dresseur Pok√©mon, sachant que chaque √©chec l'entra√Æne vers l'√©volution.",
                "Comme un ma√Ætre Pok√©mon, Sefer comprend que la vraie force vient de l'amiti√© et de la pers√©v√©rance.",
                "Sefer attrape ses r√™ves avec la d√©termination d'un dresseur Pok√©mon, car il sait qu'il faut tous les attraper."
            ]
            return quotes.randomElement()!
        } else if lowerTheme.contains("football") || lowerTheme.contains("fifa") {
            let quotes = [
                "Sur le terrain de la vie, Sefer dribble les obstacles avec la technique d'un grand footballeur.",
                "Sefer marque ses buts dans l'existence avec la pr√©cision d'un champion de football, sachant que chaque passe compte.",
                "Comme dans le football, Sefer joue en √©quipe avec la vie, transformant chaque d√©faite en le√ßon de victoire."
            ]
            return quotes.randomElement()!
        } else if lowerTheme.contains("basketball") || lowerTheme.contains("basket") {
            let quotes = [
                "Sefer shoot ses r√™ves dans le panier de la r√©ussite avec la pr√©cision d'un basketteur professionnel.",
                "Comme au basketball, Sefer sait que chaque dunk de la vie n√©cessite un √©lan parfait et une d√©termination sans faille.",
                "Sur le terrain de l'existence, Sefer dribble vers ses objectifs avec l'agilit√© d'un champion de basket."
            ]
            return quotes.randomElement()!
        } else {
            // Citations g√©n√©rales mais personnalis√©es
            let fallbackQuotes = [
                "Comme le dit Sefer : ¬´ Le \(theme) n'est pas une destination, c'est un voyage qui forge l'√¢me. ¬ª",
                "Sefer nous enseigne que le \(theme) na√Æt dans l'action, pas dans l'attente.",
                "¬´ Chaque jour est une nouvelle opportunit√© de cultiver le \(theme) ¬ª, rappelle Sefer avec sagesse.",
                "Dans les mots de Sefer : ¬´ Le \(theme) authentique commence par croire en ses propres r√™ves. ¬ª",
                "Sefer l'affirme : ¬´ Le \(theme) n'est pas un don, c'est une d√©cision quotidienne. ¬ª"
            ]
            return fallbackQuotes.randomElement() ?? "Sefer nous inspire : ¬´ Le \(theme) r√©side en chacun de nous, il suffit de le r√©veiller. ¬ª"
        }
    }
}

enum MistralError: Error {
    case invalidURL
    case encodingError
    case serverError
    case parsingError
    case apiKeyNotConfigured
    case quotaExceeded
    
    var localizedDescription: String {
        switch self {
        case .invalidURL:
            return "URL invalide"
        case .encodingError:
            return "Erreur d'encodage"
        case .serverError:
            return "Erreur serveur"
        case .parsingError:
            return "Erreur de parsing"
        case .apiKeyNotConfigured:
            return "Cl√© API Mistral non configur√©e"
        case .quotaExceeded:
            return "Quota API d√©pass√© - utilisation du mode local"
        }
    }
}
